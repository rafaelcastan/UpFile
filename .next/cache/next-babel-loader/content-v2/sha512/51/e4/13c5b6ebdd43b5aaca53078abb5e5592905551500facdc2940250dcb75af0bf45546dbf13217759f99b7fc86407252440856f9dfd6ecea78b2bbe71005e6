{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/components/Form/FormAddImage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nexport function FormAddImage({\n  closeModal\n}) {\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const {\n    0: localImageUrl,\n    1: setLocalImageUrl\n  } = useState('');\n  const toast = useToast();\n  const formValidations = {\n    image: {\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: file => file[0].size < 10485760 || 'O arquivo deve ser menor que 10MB',\n        acceptedFormats: file => {\n          const regexImageExtension = new RegExp('/.(gif|jpeg|png)$/i');\n\n          if (regexImageExtension.test(file[0].type)) {\n            return true;\n          }\n\n          return 'Somente são aceitos arquivos PNG, JPEG e GIF';\n        }\n      }\n    },\n    title: {\n      // TODO REQUIRED, MIN AND MAX LENGTH VALIDATIONS\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres'\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres'\n      }\n    },\n    description: {\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres'\n      }\n    }\n  };\n  const queryClient = useQueryClient();\n  const mutation = useMutation(async imageData => {\n    // TODO MUTATION API POST REQUEST,\n    // const requestImageData = {\n    //   url: imageUrl,\n    //   title: imageData.title,\n    //   description: imageData.description,\n    // };\n    const response = await api.post('/api/images', imageData);\n    return response;\n  }, {\n    // TODO ONSUCCESS MUTATION\n    onSuccess: () => {\n      queryClient.invalidateQueries('images');\n    }\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger\n  } = useForm();\n  const {\n    errors\n  } = formState;\n\n  const onSubmit = async data => {\n    try {\n      // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      if (!imageUrl) {\n        toast({\n          title: 'Imagem não adicionada',\n          description: 'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n          status: 'error'\n        });\n      } // TODO EXECUTE ASYNC MUTATION\n\n\n      await mutation.mutateAsync(data); // TODO SHOW SUCCESS TOAST\n\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        status: 'success'\n      });\n    } catch {\n      // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        status: 'error'\n      });\n    } finally {\n      // TODO CLEAN FORM, STATES AND CLOSE MODAL\n      reset();\n      closeModal();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread({\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger // TODO SEND IMAGE ERRORS\n        ,\n        error: errors.image // TODO REGISTER IMAGE INPUT WITH VALIDATIONS\n\n      }, register('image', _objectSpread({}, formValidations.image))), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\" // TODO SEND TITLE ERRORS\n        ,\n        error: errors.title // TODO REGISTER TITLE INPUT WITH VALIDATIONS\n\n      }, register('title', _objectSpread({}, formValidations.title))), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread({\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\" // TODO SEND DESCRIPTION ERRORS\n        ,\n        error: errors.description // TODO REGISTER DESCRIPTION INPUT WITH VALIDATIONS\n\n      }, register('description', _objectSpread({}, formValidations.description))), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","api","FileInput","TextInput","FormAddImage","closeModal","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","formValidations","image","required","validate","lessThan10MB","file","size","acceptedFormats","regexImageExtension","RegExp","test","type","title","minLength","value","message","maxLength","description","queryClient","mutation","imageData","response","post","onSuccess","invalidateQueries","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","status","mutateAsync","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\ntype ImageProps = {\n  title: string | unknown;\n  description: string | unknown;\n  url: string;\n};\n\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n\n  const formValidations = {\n    image: {\n      // TODO REQUIRED, LESS THAN 10 MB AND ACCEPTED FORMATS VALIDATIONS\n      required: 'Arquivo obrigatório',\n      validate: {\n        lessThan10MB: file =>\n          file[0].size < 10485760 || 'O arquivo deve ser menor que 10MB',\n        acceptedFormats: file => {\n          const regexImageExtension = new RegExp('/.(gif|jpeg|png)$/i');\n          if (regexImageExtension.test(file[0].type)) {\n            return true;\n          }\n          return 'Somente são aceitos arquivos PNG, JPEG e GIF';\n        },\n      },\n    },\n    title: {\n      // TODO REQUIRED, MIN AND MAX LENGTH VALIDATIONS\n      required: 'Título obrigatório',\n      minLength: {\n        value: 2,\n        message: 'Mínimo de 2 caracteres',\n      },\n      maxLength: {\n        value: 20,\n        message: 'Máximo de 20 caracteres',\n      },\n    },\n    description: {\n      // TODO REQUIRED, MAX LENGTH VALIDATIONS\n      required: 'Descrição obrigatória',\n      maxLength: {\n        value: 65,\n        message: 'Máximo de 65 caracteres',\n      },\n    },\n  };\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async (imageData: ImageProps) => {\n      // TODO MUTATION API POST REQUEST,\n      // const requestImageData = {\n      //   url: imageUrl,\n      //   title: imageData.title,\n      //   description: imageData.description,\n      // };\n      const response = await api.post('/api/images', imageData);\n      return response;\n    },\n    {\n      // TODO ONSUCCESS MUTATION\n      onSuccess: () => {\n        queryClient.invalidateQueries('images');\n      },\n    }\n  );\n\n  const { register, handleSubmit, reset, formState, setError, trigger } =\n    useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data: Record<string, unknown>): Promise<void> => {\n    try {\n      // TODO SHOW ERROR TOAST IF IMAGE URL DOES NOT EXISTS\n      if (!imageUrl) {\n        toast({\n          title: 'Imagem não adicionada',\n          description:\n            'É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.',\n          status: 'error',\n        });\n      }\n      // TODO EXECUTE ASYNC MUTATION\n      await mutation.mutateAsync(data as ImageProps);\n      // TODO SHOW SUCCESS TOAST\n      toast({\n        title: 'Imagem cadastrada',\n        description: 'Sua imagem foi cadastrada com sucesso.',\n        status: 'success',\n      });\n    } catch {\n      // TODO SHOW ERROR TOAST IF SUBMIT FAILED\n      toast({\n        title: 'Falha no cadastro',\n        description: 'Ocorreu um erro ao tentar cadastrar a sua imagem.',\n        status: 'error',\n      });\n    } finally {\n      // TODO CLEAN FORM, STATES AND CLOSE MODAL\n      reset();\n      closeModal();\n    }\n  };\n\n  return (\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          // TODO SEND IMAGE ERRORS\n          error={errors.image}\n          // TODO REGISTER IMAGE INPUT WITH VALIDATIONS\n          {...register('image', { ...formValidations.image })}\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          // TODO SEND TITLE ERRORS\n          error={errors.title}\n          // TODO REGISTER TITLE INPUT WITH VALIDATIONS\n          {...register('title', { ...formValidations.title })}\n        />\n\n        <TextInput\n          placeholder=\"Descrição da imagem...\"\n          // TODO SEND DESCRIPTION ERRORS\n          error={errors.description}\n          // TODO REGISTER DESCRIPTION INPUT WITH VALIDATIONS\n          {...register('description', { ...formValidations.description })}\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}