{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx\";\nimport { Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nexport default function Home() {\n  const GetImages = async (param = null) => {\n    const {\n      pageParam\n    } = param;\n    const response = await api.get('/api/images', {\n      params: {\n        after: pageParam\n      }\n    });\n    console.log(response);\n    return response.data;\n  };\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage\n  } = useInfiniteQuery('images', // TODO AXIOS REQUEST WITH PARAM\n  GetImages, // TODO GET AND RETURN NEXT PAGE PARAM\n  {\n    getNextPageParam: lastPage => (lastPage === null || lastPage === void 0 ? void 0 : lastPage.after) || null\n  });\n  const formattedData = useMemo(() => {// TODO FORMAT AND FLAT DATA ARRAY\n  }, [data]); // TODO RENDER LOADING SCREEN\n  // TODO RENDER ERROR SCREEN\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      maxW: 1120,\n      px: 20,\n      mx: \"auto\",\n      my: 20,\n      children: /*#__PURE__*/_jsxDEV(CardList, {\n        cards: formattedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx"],"names":["Box","useMemo","useInfiniteQuery","Header","CardList","api","Home","GetImages","param","pageParam","response","get","params","after","console","log","data","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","getNextPageParam","lastPage","formattedData"],"mappings":";;;AAAA,SAAiBA,GAAjB,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAiBA,eAAe,SAASC,IAAT,GAA6B;AAC1C,QAAMC,SAAS,GAAG,OAAOC,KAAK,GAAG,IAAf,KAAsD;AACtE,UAAM;AAAEC,MAAAA;AAAF,QAAgBD,KAAtB;AACA,UAAME,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAJ,CAAQ,aAAR,EAAuB;AAC5CC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,KAAK,EAAEJ;AAAT;AADoC,KAAvB,CAAvB;AAIAK,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,WAAOA,QAAQ,CAACM,IAAhB;AACD,GATD;;AAWA,QAAM;AACJA,IAAAA,IADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,kBAJI;AAKJC,IAAAA,aALI;AAMJC,IAAAA;AANI,MAOFnB,gBAAgB,CAClB,QADkB,EAElB;AACAK,EAAAA,SAHkB,EAIlB;AACA;AACEe,IAAAA,gBAAgB,EAAEC,QAAQ,IAAI,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEV,KAAV,KAAmB;AADnD,GALkB,CAPpB;AAiBA,QAAMW,aAAa,GAAGvB,OAAO,CAAC,MAAM,CAClC;AACD,GAF4B,EAE1B,CAACe,IAAD,CAF0B,CAA7B,CA7B0C,CAiC1C;AAEA;;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,IAAX;AAAiB,MAAA,EAAE,EAAE,EAArB;AAAyB,MAAA,EAAE,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAE,EAAvC;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEQ;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAUD","sourcesContent":["import { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\ninterface Image {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n}\n\ninterface ImagesQueryResponse {\n  after: string;\n  data: Image[];\n}\n\nexport default function Home(): JSX.Element {\n  const GetImages = async (param = null): Promise<ImagesQueryResponse> => {\n    const { pageParam } = param;\n    const response = await api.get('/api/images', {\n      params: { after: pageParam },\n    });\n\n    console.log(response);\n\n    return response.data;\n  };\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'images',\n    // TODO AXIOS REQUEST WITH PARAM\n    GetImages,\n    // TODO GET AND RETURN NEXT PAGE PARAM\n    {\n      getNextPageParam: lastPage => lastPage?.after || null,\n    }\n  );\n\n  const formattedData = useMemo(() => {\n    // TODO FORMAT AND FLAT DATA ARRAY\n  }, [data]);\n\n  // TODO RENDER LOADING SCREEN\n\n  // TODO RENDER ERROR SCREEN\n\n  return (\n    <>\n      <Header />\n\n      <Box maxW={1120} px={20} mx=\"auto\" my={20}>\n        <CardList cards={formattedData} />\n        {/* TODO RENDER LOAD MORE BUTTON IF DATA HAS NEXT PAGE */}\n      </Box>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}