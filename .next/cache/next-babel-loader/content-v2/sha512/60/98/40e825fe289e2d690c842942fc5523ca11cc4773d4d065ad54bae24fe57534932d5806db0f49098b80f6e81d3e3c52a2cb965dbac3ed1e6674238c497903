{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Box, Flex } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\nexport default function Home() {\n  _s();\n\n  var fetchImages = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var param,\n          pageParam,\n          response,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              param = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;\n              pageParam = param.pageParam;\n              _context.next = 4;\n              return api.get('/api/images', {\n                params: {\n                  after: pageParam\n                }\n              });\n\n            case 4:\n              response = _context.sent;\n              return _context.abrupt(\"return\", response.data);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchImages() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useInfiniteQuery = useInfiniteQuery('images', fetchImages, {\n    getNextPageParam: function getNextPageParam(lastPage, pages) {\n      return pages[pages.length - 1].after || null;\n    }\n  }),\n      data = _useInfiniteQuery.data,\n      isLoading = _useInfiniteQuery.isLoading,\n      isError = _useInfiniteQuery.isError,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage;\n\n  var formattedData = useMemo(function () {\n    var images = data === null || data === void 0 ? void 0 : data.pages.map(function (page) {\n      return page.data;\n    }).flat();\n    return images;\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : isError ? /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        maxW: 1120,\n        px: 20,\n        mx: \"auto\",\n        my: 20,\n        children: [/*#__PURE__*/_jsxDEV(CardList, {\n          cards: formattedData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), hasNextPage && /*#__PURE__*/_jsxDEV(Flex, {\n          mt: \"1rem\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: function onClick() {\n              return fetchNextPage();\n            },\n            disabled: isFetchingNextPage,\n            children: isFetchingNextPage ? 'Carregando...' : 'Carregar mais'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false);\n}\n\n_s(Home, \"GuuWGVmqfHme7mRc/ergBOrsbkk=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx"],"names":["Button","Box","Flex","useMemo","useInfiniteQuery","Header","CardList","api","Loading","Error","Home","fetchImages","param","pageParam","get","params","after","response","data","getNextPageParam","lastPage","pages","length","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","formattedData","images","map","page","flat"],"mappings":"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","sourcesContent":["import { Button, Box, Flex } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\nexport default function Home(): JSX.Element {\n  const fetchImages = async (param = null) => {\n    const { pageParam } = param;\n    const response = await api.get('/api/images', {\n      params: { after: pageParam },\n    });\n\n    return response.data;\n  };\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery('images', fetchImages, {\n    getNextPageParam: (lastPage, pages) => {\n      return pages[pages.length - 1].after || null;\n    },\n  });\n\n  const formattedData = useMemo(() => {\n    const images = data?.pages.map(page => page.data).flat();\n    return images;\n  }, [data]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loading />\n      ) : isError ? (\n        <Error />\n      ) : (\n        <>\n          <Header />\n          <Box maxW={1120} px={20} mx=\"auto\" my={20}>\n            <CardList cards={formattedData} />\n            {hasNextPage && (\n              <Flex mt=\"1rem\">\n                <Button\n                  onClick={() => fetchNextPage()}\n                  disabled={isFetchingNextPage}\n                >\n                  {isFetchingNextPage ? 'Carregando...' : 'Carregar mais'}\n                </Button>\n              </Flex>\n            )}\n          </Box>\n        </>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}