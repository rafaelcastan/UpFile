{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fauna from 'faunadb';\nconst {\n  query\n} = fauna;\nconst client = new fauna.Client({\n  secret: process.env.FAUNA_API_KEY,\n  domain: 'db.us.fauna.com'\n});\nconsole.log(client);\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    const {\n      url,\n      title,\n      description\n    } = req.body;\n    return client.query(query.Create(query.Collection('images'), {\n      data: {\n        title,\n        description,\n        url\n      }\n    })).then(() => {\n      return res.status(201).json({\n        success: true\n      });\n    }).catch(err => res.status(501).json({\n      error: `Sorry something Happened! ${err.message}`\n    }));\n  }\n\n  if (req.method === 'GET') {\n    console.log('query ->', req.query);\n    const {\n      after\n    } = req.query;\n\n    const queryOptions = _objectSpread({\n      size: 6\n    }, after && {\n      after: query.Ref(query.Collection('images'), after)\n    });\n\n    return client.query(query.Map(query.Paginate(query.Documents(query.Collection('images')), queryOptions), query.Lambda('X', query.Get(query.Var('X'))))).then(response => {\n      const formattedData = response.data.map(item => _objectSpread(_objectSpread({}, item.data), {}, {\n        ts: item.ts,\n        id: item.ref.id\n      }));\n      return res.json({\n        data: formattedData,\n        after: response.after ? response.after[0].id : null\n      });\n    }).catch(err => {\n      console.log(err);\n      return res.status(400).json(err);\n    });\n  }\n\n  return res.status(405).json({\n    error: `Method '${req.method}' Not Allowed`\n  });\n}","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/api/images.ts"],"names":["fauna","query","client","Client","secret","process","env","FAUNA_API_KEY","domain","console","log","handler","req","res","method","url","title","description","body","Create","Collection","data","then","status","json","success","catch","err","error","message","after","queryOptions","size","Ref","Map","Paginate","Documents","Lambda","Get","Var","response","formattedData","map","item","ts","id","ref"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport fauna from 'faunadb';\n\nconst { query } = fauna;\nconst client = new fauna.Client({\n  secret: process.env.FAUNA_API_KEY,\n  domain: 'db.us.fauna.com',\n});\nconsole.log(client);\ninterface ImagesQueryResponse {\n  after?: {\n    id: string;\n  };\n  data: {\n    data: {\n      title: string;\n      description: string;\n      url: string;\n    };\n    ts: number;\n    ref: {\n      id: string;\n    };\n  }[];\n}\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n): Promise<void> {\n  if (req.method === 'POST') {\n    const { url, title, description } = req.body;\n\n    return client\n      .query(\n        query.Create(query.Collection('images'), {\n          data: {\n            title,\n            description,\n            url,\n          },\n        })\n      )\n      .then(() => {\n        return res.status(201).json({ success: true });\n      })\n      .catch(err =>\n        res\n          .status(501)\n          .json({ error: `Sorry something Happened! ${err.message}` })\n      );\n  }\n\n  if (req.method === 'GET') {\n    console.log('query ->', req.query);\n    const { after } = req.query;\n\n    const queryOptions = {\n      size: 6,\n      ...(after && { after: query.Ref(query.Collection('images'), after) }),\n    };\n\n    return client\n      .query<ImagesQueryResponse>(\n        query.Map(\n          query.Paginate(\n            query.Documents(query.Collection('images')),\n            queryOptions\n          ),\n          query.Lambda('X', query.Get(query.Var('X')))\n        )\n      )\n      .then(response => {\n        const formattedData = response.data.map(item => ({\n          ...item.data,\n          ts: item.ts,\n          id: item.ref.id,\n        }));\n\n        return res.json({\n          data: formattedData,\n          after: response.after ? response.after[0].id : null,\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        return res.status(400).json(err);\n      });\n  }\n\n  return res.status(405).json({ error: `Method '${req.method}' Not Allowed` });\n}\n"]},"metadata":{},"sourceType":"module"}