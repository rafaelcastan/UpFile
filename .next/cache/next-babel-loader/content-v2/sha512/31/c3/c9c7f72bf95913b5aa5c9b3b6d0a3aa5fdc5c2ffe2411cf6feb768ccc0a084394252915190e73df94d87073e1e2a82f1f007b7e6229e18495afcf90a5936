{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nexport default function Home() {\n  _s();\n\n  var GetImages = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var param,\n          pageParam,\n          data,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              param = _args.length > 0 && _args[0] !== undefined ? _args[0] : null;\n              pageParam = param.pageParam;\n              data = param.data;\n              console.log(data);\n              return _context.abrupt(\"return\", data);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function GetImages() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var _useInfiniteQuery = useInfiniteQuery('images', // TODO AXIOS REQUEST WITH PARAM\n  GetImages, // TODO GET AND RETURN NEXT PAGE PARAM\n  {\n    getNextPageParam: function getNextPageParam(lastPage) {\n      return (lastPage === null || lastPage === void 0 ? void 0 : lastPage.after) || null;\n    }\n  }),\n      data = _useInfiniteQuery.data,\n      isLoading = _useInfiniteQuery.isLoading,\n      isError = _useInfiniteQuery.isError,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage;\n\n  var formattedData = useMemo(function () {// TODO FORMAT AND FLAT DATA ARRAY\n  }, [data]); // TODO RENDER LOADING SCREEN\n  // TODO RENDER ERROR SCREEN\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      maxW: 1120,\n      px: 20,\n      mx: \"auto\",\n      my: 20,\n      children: /*#__PURE__*/_jsxDEV(CardList, {\n        cards: formattedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Home, \"GuuWGVmqfHme7mRc/ergBOrsbkk=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx"],"names":["Box","useMemo","useInfiniteQuery","Header","CardList","Home","GetImages","param","pageParam","data","console","log","getNextPageParam","lastPage","after","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","formattedData"],"mappings":";;;;;;;;AAAA,SAAiBA,GAAjB,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAkBA,eAAe,SAASC,IAAT,GAA6B;AAAA;;AAC1C,MAAMC,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,cAAAA,KAAP,2DAAe,IAAf;AACRC,cAAAA,SADQ,GACMD,KADN,CACRC,SADQ;AAERC,cAAAA,IAFQ,GAECF,KAFD,CAERE,IAFQ;AAIhBC,cAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAJgB,+CAMTA,IANS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATH,SAAS;AAAA;AAAA;AAAA,KAAf;;AAD0C,0BAiBtCJ,gBAAgB,CAClB,QADkB,EAElB;AACAI,EAAAA,SAHkB,EAIlB;AACA;AACEM,IAAAA,gBAAgB,EAAE,0BAAAC,QAAQ;AAAA,aAAI,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEC,KAAV,KAAmB,IAAvB;AAAA;AAD5B,GALkB,CAjBsB;AAAA,MAWxCL,IAXwC,qBAWxCA,IAXwC;AAAA,MAYxCM,SAZwC,qBAYxCA,SAZwC;AAAA,MAaxCC,OAbwC,qBAaxCA,OAbwC;AAAA,MAcxCC,kBAdwC,qBAcxCA,kBAdwC;AAAA,MAexCC,aAfwC,qBAexCA,aAfwC;AAAA,MAgBxCC,WAhBwC,qBAgBxCA,WAhBwC;;AA2B1C,MAAMC,aAAa,GAAGnB,OAAO,CAAC,YAAM,CAClC;AACD,GAF4B,EAE1B,CAACQ,IAAD,CAF0B,CAA7B,CA3B0C,CA+B1C;AAEA;;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,IAAX;AAAiB,MAAA,EAAE,EAAE,EAArB;AAAyB,MAAA,EAAE,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAE,EAAvC;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEW;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAUD;;GA7CuBf,I;UAiBlBH,gB;;;KAjBkBG,I","sourcesContent":["import { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\ninterface Image {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n}\n\ninterface ImagesQueryResponse {\n  after: string;\n  data: Image[];\n}\n\nexport default function Home(): JSX.Element {\n  const GetImages = async (param = null): Promise<ImagesQueryResponse> => {\n    const { pageParam } = param;\n    const { data } = param\n\n    console.log(data);\n\n    return data;\n  };\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'images',\n    // TODO AXIOS REQUEST WITH PARAM\n    GetImages,\n    // TODO GET AND RETURN NEXT PAGE PARAM\n    {\n      getNextPageParam: lastPage => lastPage?.after || null,\n    }\n  );\n\n  const formattedData = useMemo(() => {\n    // TODO FORMAT AND FLAT DATA ARRAY\n  }, [data]);\n\n  // TODO RENDER LOADING SCREEN\n\n  // TODO RENDER ERROR SCREEN\n\n  return (\n    <>\n      <Header />\n\n      <Box maxW={1120} px={20} mx=\"auto\" my={20}>\n        <CardList cards={formattedData} />\n        {/* TODO RENDER LOAD MORE BUTTON IF DATA HAS NEXT PAGE */}\n      </Box>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}