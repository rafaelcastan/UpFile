{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/components/Form/FormAddImage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\nexport function FormAddImage({\n  closeModal\n}) {\n  const {\n    0: imageUrl,\n    1: setImageUrl\n  } = useState('');\n  const {\n    0: localImageUrl,\n    1: setLocalImageUrl\n  } = useState('');\n  const toast = useToast();\n  const formValidations = {\n    image: {\n      required: \"Arquivo obrigatório\",\n      validate: {\n        lessThan10MB: file => file[0].size < 10485760 || \"O arquivo deve ser menor que 10MB\",\n        acceptedFormats: file => {\n          const regexImageExtension = new RegExp(\"^image\\/(jpeg|gif|png)\");\n\n          if (regexImageExtension.test(file[0].type)) {\n            return true;\n          } else {\n            return \"Somente são aceitos arquivos PNG, JPEG e GIF\";\n          }\n        }\n      }\n    },\n    title: {\n      minLength: {\n        value: 2,\n        message: \"Mínimo de 2 caracteres\"\n      },\n      maxLength: {\n        value: 20,\n        message: \"Máximo de 20 caracteres\"\n      },\n      required: \"Título obrigatório\"\n    },\n    description: {\n      maxLength: {\n        value: 65,\n        message: \"Máximo de 65 caracteres\"\n      },\n      required: \"Descrição obrigatória\"\n    }\n  };\n  const queryClient = useQueryClient();\n  const mutation = useMutation(async imageData => {\n    const requestImageData = {\n      url: imageUrl,\n      title: imageData.title,\n      description: imageData.description\n    };\n    const response = await api.post(\"/api/images\", requestImageData);\n    return response;\n  }, {\n    onSuccess: () => {\n      queryClient.invalidateQueries(\"images\");\n    }\n  });\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger\n  } = useForm();\n  const {\n    errors\n  } = formState;\n\n  const onSubmit = async data => {\n    try {\n      if (!imageUrl) {\n        toast({\n          title: \"Imagem não adicionada\",\n          description: \"É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.\",\n          status: \"error\"\n        });\n        return;\n      }\n\n      await mutation.mutateAsync(data);\n      toast({\n        title: \"Imagem cadastrada\",\n        description: \"Sua imagem foi cadastrada com sucesso.\",\n        status: \"success\"\n      });\n    } catch {\n      toast({\n        title: \"Falha no cadastro\",\n        description: \"Ocorreu um erro ao tentar cadastrar a sua imagem.\",\n        status: \"error\"\n      });\n    } finally {\n      reset();\n      closeModal();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    as: \"form\",\n    width: \"100%\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 4,\n      children: [/*#__PURE__*/_jsxDEV(FileInput, _objectSpread(_objectSpread({\n        name: \"image\",\n        setImageUrl: setImageUrl,\n        localImageUrl: localImageUrl,\n        setLocalImageUrl: setLocalImageUrl,\n        setError: setError,\n        trigger: trigger\n      }, register(\"image\", _objectSpread({}, formValidations.image))), {}, {\n        error: errors.image\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        placeholder: \"T\\xEDtulo da imagem...\",\n        name: \"title\"\n      }, register(\"title\", _objectSpread({}, formValidations.title))), {}, {\n        error: errors.title\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextInput, _objectSpread(_objectSpread({\n        name: \"description\",\n        placeholder: \"Descri\\xE7\\xE3o da imagem...\"\n      }, register(\"description\", _objectSpread({}, formValidations.description))), {}, {\n        error: errors.description\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      my: 6,\n      isLoading: formState.isSubmitting,\n      isDisabled: formState.isSubmitting,\n      type: \"submit\",\n      w: \"100%\",\n      py: 6,\n      children: \"Enviar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/components/Form/FormAddImage.tsx"],"names":["Box","Button","Stack","useToast","useForm","useState","useMutation","useQueryClient","api","FileInput","TextInput","FormAddImage","closeModal","imageUrl","setImageUrl","localImageUrl","setLocalImageUrl","toast","formValidations","image","required","validate","lessThan10MB","file","size","acceptedFormats","regexImageExtension","RegExp","test","type","title","minLength","value","message","maxLength","description","queryClient","mutation","imageData","requestImageData","url","response","post","onSuccess","invalidateQueries","register","handleSubmit","reset","formState","setError","trigger","errors","onSubmit","data","status","mutateAsync","isSubmitting"],"mappings":"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","sourcesContent":["\nimport { Box, Button, Stack, useToast } from '@chakra-ui/react';\nimport { useForm } from 'react-hook-form';\nimport { useState } from 'react';\nimport { useMutation, useQueryClient } from 'react-query';\n\nimport { api } from '../../services/api';\nimport { FileInput } from '../Input/FileInput';\nimport { TextInput } from '../Input/TextInput';\n\ninterface FormAddImageProps {\n  closeModal: () => void;\n}\n\ntype ImageProps = {\n  title: string | unknown;\n  description: string | unknown;\n  url: string;\n};\n\nexport function FormAddImage({ closeModal }: FormAddImageProps): JSX.Element {\n  const [imageUrl, setImageUrl] = useState('');\n  const [localImageUrl, setLocalImageUrl] = useState('');\n  const toast = useToast();\n  const formValidations = {\n    image: {\n      required: \"Arquivo obrigatório\",\n      validate: {\n        lessThan10MB: file => file[0].size < 10485760 || \"O arquivo deve ser menor que 10MB\",\n        acceptedFormats: file => {\n          const regexImageExtension = new RegExp(\"^image\\/(jpeg|gif|png)\");\n          if (regexImageExtension.test(file[0].type)){\n            return true\n          } else {\n            return \"Somente são aceitos arquivos PNG, JPEG e GIF\"\n          }\n        }\n      }\n    },\n    title: {\n      minLength: {\n        value: 2,\n        message: \"Mínimo de 2 caracteres\"\n      },\n      maxLength: {\n        value: 20,\n        message: \"Máximo de 20 caracteres\"\n      },\n      required: \"Título obrigatório\"\n    },\n    description: {\n      maxLength: {\n        value: 65,\n        message: \"Máximo de 65 caracteres\"\n      },\n      required: \"Descrição obrigatória\"\n    },\n  };\n\n  const queryClient = useQueryClient();\n  const mutation = useMutation( async(imageData : ImageProps) => {\n\n    const requestImageData = {\n      url: imageUrl,\n      title: imageData.title,\n      description: imageData.description\n    }\n    const response =  await api.post(\"/api/images\", requestImageData);\n    return response;\n   },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"images\");\n      }\n    }\n  );\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState,\n    setError,\n    trigger,\n  } = useForm();\n  const { errors } = formState;\n\n  const onSubmit = async (data: Record<string, unknown>): Promise<void> => {\n    try {\n\n      if(!imageUrl) {\n        toast({\n          title: \"Imagem não adicionada\",\n          description: \"É preciso adicionar e aguardar o upload de uma imagem antes de realizar o cadastro.\",\n          status: \"error\"\n        })\n        return;\n      }\n      await mutation.mutateAsync(data as ImageProps);\n\n      toast({\n        title: \"Imagem cadastrada\",\n        description: \"Sua imagem foi cadastrada com sucesso.\",\n        status: \"success\"\n      })\n    } catch {\n      toast({\n        title: \"Falha no cadastro\",\n        description: \"Ocorreu um erro ao tentar cadastrar a sua imagem.\",\n        status: \"error\"\n      })\n    } finally {\n      reset();\n      closeModal();\n    }\n  };\n\n  return (\n\n    <Box as=\"form\" width=\"100%\" onSubmit={handleSubmit(onSubmit)}>\n      <Stack spacing={4}>\n        <FileInput\n          name=\"image\"\n          setImageUrl={setImageUrl}\n          localImageUrl={localImageUrl}\n          setLocalImageUrl={setLocalImageUrl}\n          setError={setError}\n          trigger={trigger}\n          {...register(\"image\", {...formValidations.image})}\n          error={errors.image}\n        />\n\n        <TextInput\n          placeholder=\"Título da imagem...\"\n          name=\"title\"\n          {...register(\"title\", {...formValidations.title})}\n          error={errors.title}\n        />\n\n        <TextInput\n          name=\"description\"\n          placeholder=\"Descrição da imagem...\"\n          {...register(\"description\", {...formValidations.description})}\n          error={errors.description}\n        />\n      </Stack>\n\n      <Button\n        my={6}\n        isLoading={formState.isSubmitting}\n        isDisabled={formState.isSubmitting}\n        type=\"submit\"\n        w=\"100%\"\n        py={6}\n      >\n        Enviar\n      </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}