{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/components/CardList.tsx\";\nimport { SimpleGrid, useDisclosure } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Card } from './Card';\nimport { ModalViewImage } from './Modal/ViewImage';\nexport function CardList({\n  cards\n}) {\n  // TODO MODAL USEDISCLOSURE\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure(); // TODO SELECTED IMAGE URL STATE\n\n  const {\n    0: imgUrl,\n    1: setimgUrl\n  } = useState(''); // TODO FUNCTION HANDLE VIEW IMAGE\n\n  function viewImage(Url) {\n    setimgUrl(Url);\n    onOpen();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SimpleGrid, {\n      columns: [2, 3],\n      spacing: 10,\n      children: [cards.map(card => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          data: card,\n          viewImage: () => {\n            viewImage(card.url);\n          }\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this);\n      }), isOpen && /*#__PURE__*/_jsxDEV(ModalViewImage, {\n        imgUrl: imgUrl,\n        onClose: onClose,\n        isOpen: isOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/components/CardList.tsx"],"names":["SimpleGrid","useDisclosure","useState","Card","ModalViewImage","CardList","cards","isOpen","onOpen","onClose","imgUrl","setimgUrl","viewImage","Url","map","card","url","id"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,aAArB,QAA0C,kBAA1C;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AAcA,OAAO,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAsD;AAC3D;AACA,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,MAA8BR,aAAa,EAAjD,CAF2D,CAI3D;;AACA,QAAM;AAAA,OAACS,MAAD;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAAC,EAAD,CAApC,CAL2D,CAO3D;;AACA,WAASU,SAAT,CAAmBC,GAAnB,EAAsC;AACpCF,IAAAA,SAAS,CAACE,GAAD,CAAT;AACAL,IAAAA,MAAM;AACP;;AAED,sBACE;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,CAArB;AAA6B,MAAA,OAAO,EAAE,EAAtC;AAAA,iBACGF,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAI;AACjB,4BACE,QAAC,IAAD;AAEE,UAAA,IAAI,EAAEA,IAFR;AAGE,UAAA,SAAS,EAAE,MAAM;AACfH,YAAAA,SAAS,CAACG,IAAI,CAACC,GAAN,CAAT;AACD;AALH,WACOD,IAAI,CAACE,EADZ;AAAA;AAAA;AAAA;AAAA,gBADF;AASD,OAVA,CADH,EAaGV,MAAM,iBACL,QAAC,cAAD;AAAgB,QAAA,MAAM,EAAEG,MAAxB;AAAgC,QAAA,OAAO,EAAED,OAAzC;AAAkD,QAAA,MAAM,EAAEF;AAA1D;AAAA;AAAA;AAAA;AAAA,cAdJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAqBD","sourcesContent":["import { SimpleGrid, useDisclosure } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Card } from './Card';\nimport { ModalViewImage } from './Modal/ViewImage';\n\ninterface Card {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n}\n\ninterface CardsProps {\n  cards: Card[];\n}\n\nexport function CardList({ cards }: CardsProps): JSX.Element {\n  // TODO MODAL USEDISCLOSURE\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  // TODO SELECTED IMAGE URL STATE\n  const [imgUrl, setimgUrl] = useState('');\n\n  // TODO FUNCTION HANDLE VIEW IMAGE\n  function viewImage(Url: string): void {\n    setimgUrl(Url);\n    onOpen();\n  }\n\n  return (\n    <>\n      <SimpleGrid columns={[2, 3]} spacing={10}>\n        {cards.map(card => {\n          return (\n            <Card\n              key={card.id}\n              data={card}\n              viewImage={() => {\n                viewImage(card.url);\n              }}\n            />\n          );\n        })}\n\n        {isOpen && (\n          <ModalViewImage imgUrl={imgUrl} onClose={onClose} isOpen={isOpen} />\n        )}\n      </SimpleGrid>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}