{"ast":null,"code":"import _regeneratorRuntime from \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _asyncToGenerator from \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nexport default function Home() {\n  _s();\n\n  function LoadImages(_x) {\n    return _LoadImages.apply(this, arguments);\n  }\n\n  function _LoadImages() {\n    _LoadImages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var _ref$pageParam, pageParam, _yield$api$get, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$pageParam = _ref.pageParam, pageParam = _ref$pageParam === void 0 ? null : _ref$pageParam;\n              console.log(pageParam);\n              _context.next = 4;\n              return api.get('api/images', {\n                params: {\n                  after: pageParam\n                }\n              });\n\n            case 4:\n              _yield$api$get = _context.sent;\n              data = _yield$api$get.data;\n              return _context.abrupt(\"return\", data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _LoadImages.apply(this, arguments);\n  }\n\n  var _useInfiniteQuery = useInfiniteQuery('images', // TODO AXIOS REQUEST WITH PARAM\n  LoadImages, // TODO GET AND RETURN NEXT PAGE PARAM\n  {\n    getNextPageParam: function getNextPageParam(lastPage) {\n      return (lastPage === null || lastPage === void 0 ? void 0 : lastPage.after) || null;\n    }\n  }),\n      data = _useInfiniteQuery.data,\n      isLoading = _useInfiniteQuery.isLoading,\n      isError = _useInfiniteQuery.isError,\n      isFetchingNextPage = _useInfiniteQuery.isFetchingNextPage,\n      fetchNextPage = _useInfiniteQuery.fetchNextPage,\n      hasNextPage = _useInfiniteQuery.hasNextPage;\n\n  var formattedData = useMemo(function () {// TODO FORMAT AND FLAT DATA ARRAY\n  }, [data]); // TODO RENDER LOADING SCREEN\n  // TODO RENDER ERROR SCREEN\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      maxW: 1120,\n      px: 20,\n      mx: \"auto\",\n      my: 20,\n      children: /*#__PURE__*/_jsxDEV(CardList, {\n        cards: formattedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Home, \"GuuWGVmqfHme7mRc/ergBOrsbkk=\", false, function () {\n  return [useInfiniteQuery];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/rafael/HD/Estudos/ignite-template-reactjs-upload-de-imagens/src/pages/index.tsx"],"names":["Box","useMemo","useInfiniteQuery","Header","CardList","api","Home","LoadImages","pageParam","console","log","get","params","after","data","getNextPageParam","lastPage","isLoading","isError","isFetchingNextPage","fetchNextPage","hasNextPage","formattedData"],"mappings":";;;;;;;;AAAA,SAAiBA,GAAjB,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAiBA,eAAe,SAASC,IAAT,GAA6B;AAAA;;AAAA,WAC3BC,UAD2B;AAAA;AAAA;;AAAA;AAAA,2EAC1C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCACEC,SADF,EACEA,SADF,+BACc,IADd;AAGEC,cAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAHF;AAAA,qBAIyBH,GAAG,CAACM,GAAJ,CAAQ,YAAR,EAAsB;AAC3CC,gBAAAA,MAAM,EAAE;AACNC,kBAAAA,KAAK,EAAEL;AADD;AADmC,eAAtB,CAJzB;;AAAA;AAAA;AAIUM,cAAAA,IAJV,kBAIUA,IAJV;AAAA,+CAUSA,IAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD0C;AAAA;AAAA;;AAAA,0BAqBtCZ,gBAAgB,CAClB,QADkB,EAElB;AACAK,EAAAA,UAHkB,EAIlB;AACA;AACEQ,IAAAA,gBAAgB,EAAE,0BAAAC,QAAQ;AAAA,aAAI,CAAAA,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,KAAV,KAAmB,IAAvB;AAAA;AAD5B,GALkB,CArBsB;AAAA,MAexCC,IAfwC,qBAexCA,IAfwC;AAAA,MAgBxCG,SAhBwC,qBAgBxCA,SAhBwC;AAAA,MAiBxCC,OAjBwC,qBAiBxCA,OAjBwC;AAAA,MAkBxCC,kBAlBwC,qBAkBxCA,kBAlBwC;AAAA,MAmBxCC,aAnBwC,qBAmBxCA,aAnBwC;AAAA,MAoBxCC,WApBwC,qBAoBxCA,WApBwC;;AA+B1C,MAAMC,aAAa,GAAGrB,OAAO,CAAC,YAAM,CAClC;AACD,GAF4B,EAE1B,CAACa,IAAD,CAF0B,CAA7B,CA/B0C,CAmC1C;AAEA;;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,GAAD;AAAK,MAAA,IAAI,EAAE,IAAX;AAAiB,MAAA,EAAE,EAAE,EAArB;AAAyB,MAAA,EAAE,EAAC,MAA5B;AAAmC,MAAA,EAAE,EAAE,EAAvC;AAAA,6BACE,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEQ;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAUD;;GAjDuBhB,I;UAqBlBJ,gB;;;KArBkBI,I","sourcesContent":["import { Button, Box } from '@chakra-ui/react';\nimport { useMemo } from 'react';\nimport { useInfiniteQuery } from 'react-query';\n\nimport { Header } from '../components/Header';\nimport { CardList } from '../components/CardList';\nimport { api } from '../services/api';\nimport { Loading } from '../components/Loading';\nimport { Error } from '../components/Error';\n\ninterface Image {\n  title: string;\n  description: string;\n  url: string;\n  ts: number;\n  id: string;\n}\n\ninterface ImagesQueryResponse {\n  after: string;\n  data: Image[];\n}\n\nexport default function Home(): JSX.Element {\n  async function LoadImages({\n    pageParam = null,\n  }): Promise<ImagesQueryResponse> {\n    console.log(pageParam);\n    const { data } = await api.get('api/images', {\n      params: {\n        after: pageParam,\n      },\n    });\n\n    return data;\n  }\n\n  const {\n    data,\n    isLoading,\n    isError,\n    isFetchingNextPage,\n    fetchNextPage,\n    hasNextPage,\n  } = useInfiniteQuery(\n    'images',\n    // TODO AXIOS REQUEST WITH PARAM\n    LoadImages,\n    // TODO GET AND RETURN NEXT PAGE PARAM\n    {\n      getNextPageParam: lastPage => lastPage?.after || null,\n    }\n  );\n\n  const formattedData = useMemo(() => {\n    // TODO FORMAT AND FLAT DATA ARRAY\n  }, [data]);\n\n  // TODO RENDER LOADING SCREEN\n\n  // TODO RENDER ERROR SCREEN\n\n  return (\n    <>\n      <Header />\n\n      <Box maxW={1120} px={20} mx=\"auto\" my={20}>\n        <CardList cards={formattedData} />\n        {/* TODO RENDER LOAD MORE BUTTON IF DATA HAS NEXT PAGE */}\n      </Box>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}